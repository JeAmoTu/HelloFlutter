1. Text: 文本控件.
2. Row,Column: 行列控件.
3. Stack: 不是线性的,可以指定位置,基于Web的绝对定位布局模型.
4. Container: 容器,矩形视图,容器还可以对其大小应用边距,填充和约束.
5. AppBar: 标题栏
        >leading 要在标题之前显示的widget
        >title 标题
        >actions 在标题窗口小部件后显示的widgets,可以显示多个widget
6. FloatingActionButton: 材料设计浮动操作按钮.
        浮动操作按钮是将鼠标悬停在内容上以促进应用程序中的主要操作的圆形图标按钮.
        浮动操作按钮最常用于floatingActionButton字段.
        每个屏幕最多使用一个浮动操作按钮.
        浮动操作按钮应用于正面操作,如"创建","共享"或"导航".
        如果onPressed回调为null,则按钮将被禁用,并且不会触摸.
7. GestureDetector: 这个widget没有可视化表示,而是检测用户做出的手势.
        当用户点击容器时,GestureDetector将调用其onTap回调,在这种情况下,将消息打印到控制台.
        您可以使用GestureDetector检测各种输入手势,包括水龙头,拖动和缩放.
        许多小部件使用GestureDetector为其他小部件提供可选的回调.
        例如,IconButton,RaisedButton和FloatingActionButton小部件具有onPressed回调,当用户轻触小部件时触发回调.
8. RaisedButton: 带点击效果的按钮,如果实例化时OnPressed指定为空的话 将不可点击 也没有点击效果
        从源码发现 RaisedButton是继承于MaterialButton的
9. ****State****
        状态: 只有继承了StatefulWidget的类才能有状态(自己理解,如有误会修正)
        一个类继承于StatefulWidget后 需要复写下面代码
        @override
                xxxState createState() => new xxxState();
        然后创建一个继承于State的类 <>内的看源码感觉是这个状态是给哪个StatefulWidget创建的 后面懂了再修正
        必须在想要控制状态的地方实现setState((){})方法
        class xxxState extends State<Counter> {
          void xxx() {
            setState(() {
              ///TODO
            });
          }
        }
        状态使用就这么多 后续熟悉了再更新
10. dart的typedef规则貌似是,只要方法参数类型一样,就认为是同一种方法(可以认为是同一个对象)
11. CircleAvatar: 圆形头像,通常用来代表user,类似于通讯录中的表示,默认半径是20
